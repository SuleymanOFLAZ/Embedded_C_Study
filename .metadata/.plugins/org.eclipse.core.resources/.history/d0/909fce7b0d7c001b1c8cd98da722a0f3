/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int fun_add(int a, int b, int c, int d)
{
	return a+b+c+d;
}


// Changing the current SP to PSP
__attribute__((naked))  void change_sp_to_psp(void)
{
	__asm volatile(".equ SRAM_END, (0x20000000 + (128*1024))"); // #define like inline assembly (.equ) , We are defining SRAM end.
	__asm volatile(".equ PSP_START, (SRAM_END-512)"); // Defining the PSP start point
	__asm volatile("LDR r0, =PSP_START");
	__asm volatile("MSR PSP, r0"); // Loading first value of PSP
	__asm volatile("PUSH r0, r1"); // Pushing the registers that we will use in this function to stack
	__asm volatile("MRS r1, CONTROL"); // Reading CONTROL register value to r1
	__asm volatile("MOV r0, =#0x02"); // initalizing r1 with mask value
	__asm volatile("AND r1, r1, r0"); // Logical and
	__asm volatile("MSR CONTROL, r1"); // Load back to CONTROL register value
	__asm volatile("POP r0, r1"); // POPing back old register values to their location
	__asm volatile("BX lr"); // Branch indirect
}

void generate_exception(void)
{
	__asm volatile("SVC #0x2");
}
int main(void)
{
	change_sp_to_psp();

	int ret =0;
	ret = fun_add(1, 4, 5, 6);

	printf("result %d\n", ret);

	generate_exception();

    /* Loop forever */
	for(;;);
}

void SVC_Handler(void)
{
	printf("in SVC Handler\n");
}
