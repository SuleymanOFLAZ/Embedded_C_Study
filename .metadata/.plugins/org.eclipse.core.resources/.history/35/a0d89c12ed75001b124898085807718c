/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdint.h>

#include "main.h"

void delay(void);

int main(void)
{
	RCC_AHB1ENR_t volatile *const restrict pPeripClk 	= (RCC_AHB1ENR_t *)	0x40023830;
	GPIOx_MODER_t volatile *const restrict pGPIOD_mode 	= (GPIOx_MODER_t *)	0x040020C00;
	GPIOx_ODR_t   volatile *const restrict pGPIOD_odr 	= (GPIOx_ODR_t *)	0x040020C14;

	// Setting the RCC peripheral register
	pPeripClk->gpiod_en = 1;

	// Setting the pin modes
	pGPIOD_mode->pin_12 = 1;
	pGPIOD_mode->pin_13 = 1;
	pGPIOD_mode->pin_14 = 1;

	/* Loop forever */
	while(1)
	{
		pGPIOD_odr->pin_12 = 1;
		delay();
		pGPIOD_odr->pin_12 = 0;
		delay();
		pGPIOD_odr->pin_12 = 1;
		delay();
		pGPIOD_odr->pin_12 = 0;

		pGPIOD_odr->pin_13 = 1;
		delay();
		pGPIOD_odr->pin_13 = 0;
		delay();
		pGPIOD_odr->pin_13 = 1;
		delay();
		pGPIOD_odr->pin_13 = 0;

		pGPIOD_odr->pin_14 = 1;
		delay();
		pGPIOD_odr->pin_14 = 0;
		delay();
		pGPIOD_odr->pin_14 = 1;
		delay();
		pGPIOD_odr->pin_14 = 0;

		pGPIOD_odr->pin_15 = 1;
		delay();
		pGPIOD_odr->pin_15 = 0;
		delay();
		pGPIOD_odr->pin_15 = 1;
		delay();
		pGPIOD_odr->pin_15 = 0;
	}

}

void delay(void){
	for(volatile long i= 0; i<300000;i++);
}

