/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

int main(void)
{
	//  1. Enabling all configurable fault excaption
	uint32_t *pSHCRS = (uint32_t *)0xE000ED24; // Pointer to System  Handler Control and State Register
	*pSHCRS |= (1 << 18); // Enabling UsageFault Exception
	*pSHCRS |= (1 << 17); // Enabling BusFault Exception
	*pSHCRS |= (1 << 16); // Enabling MemFault Exception

	/*--------------------------------------------------------
	// 2. Generating Fault -- Undefined Instruction
	uint32_t *pSRAM = (uint32_t *)0x20010000;
	*pSRAM = 0xFFFFFFFF;

	void (*pFUN)(void);
	pFUN = (void *)0x20010001;

	pFUN();
	--------------------------------------------------------*/

	// 2. Generating Fault -- Forcing the processor to execute ARM ISA
	uint32_t *pSRAM = (uint32_t *)0x20010000;
	*pSRAM = 0xFFFFFFFF;

	void (*pFUN)(void);
	pFUN = (void *)0x20010000;

	pFUN();

    /* Loop forever */
	for(;;);
}

void HardFault_Handler(void)
{
	printf("Exception: Inside the HardFault_Handler\n");
	while(1);
}

void MemManage_Handler(void)
{
	printf("Exception: Inside the MemManage_Handler\n");
	while(1);
}

void BusFault_Handler(void)
{
	printf("Exception: Inside the BusFault_Handler\n");
	while(1);
}

void UsageFault_Handler(void)
{
	__asm ("MRS r0, MSP");
	__asm ("B UsageFault_Handler_c");
}

void UsageFault_Handler_c(uint32_t *pStack_Frame_Address)
{
	printf("Exception: Inside the UsageFault_Handler\n");
	uint32_t * pUFSR = (uint32_t *)0xE000ED2A; // Pointer to UsageFault Status Register
	printf("The Content of UFSR = %lx\n", (*pUFSR & 0xFFFF));

	//Printing Stack Frame Content
	printf("Stack Frame Contents:\n");
	printf("Value of R0 = %lx\n", pStack_Frame_Address[0]);
	printf("Value of R1 = %lx\n", pStack_Frame_Address[1]);
	printf("Value of R2 = %lx\n", pStack_Frame_Address[2]);
	printf("Value of R3 = %lx\n", pStack_Frame_Address[3]);
	printf("Value of R12 = %lx\n", pStack_Frame_Address[4]);
	printf("Value of LR = %lx\n", pStack_Frame_Address[5]);
	printf("Value of PC = %lx\n", pStack_Frame_Address[6]);
	printf("Value of XPSR = %lx\n", pStack_Frame_Address[7]);
	while(1);
}
